(function() {
  var Prez;

  $.setTimeout = function(t, fn) {
    return setTimeout(fn, t);
  };

  $.setInterval = function(t, fn) {
    return setInterval(fn, t);
  };

  $.fn.slideDuration = function() {
    return parseInt(this.data("duration") || "0", 10);
  };

  Prez = (function() {
    var DEFAULT_OPTIONS, KEY_ENTER, KEY_LEFT, KEY_RIGHT, KEY_SPACE;

    DEFAULT_OPTIONS = {
      useHash: true,
      duration: 0,
      slideElementStyle: "hide"
    };

    function Prez(options) {
      var base;
      this.options = $.extend({}, DEFAULT_OPTIONS, options);
      this.window = options.window;
      this.document = this.window.document;
      this.document.write($("#slides-document").text());
      this.document.close();
      if (typeof (base = this.options).beforeStart === "function") {
        base.beforeStart(this);
      }
      this.start();
    }

    Prez.prototype.start = function() {
      var changeToHashSlide, slideElementClass;
      changeToHashSlide = (function(_this) {
        return function() {
          var element, hash, match, selector, slide;
          if (!_this.options.useHash) {
            return false;
          }
          hash = _this.document.location.hash.replace(/^#/, "");
          match = /^(\d+)-(\d+)$/.exec(hash);
          if (match) {
            slide = parseInt(match[1], 10);
            element = parseInt(match[2], 10);
            selector = ".prez-slide[data-slide='" + slide + "']";
            if (element > 0) {
              selector = selector + " .prez-element[data-slide-element='" + element + "']";
            }
            if ($(selector, _this.document).length > 0) {
              _this.changeSlideTo(slide, element);
              return true;
            }
          }
          return false;
        };
      })(this);
      slideElementClass = this.options.slideElementStyle + "-style";
      $(".prez-slide", this.document).each(function(i) {
        $(this).attr("data-slide", "" + (i + 1));
        return $(this).find(".prez-element").each(function(j) {
          $(this).attr("data-slide-element", "" + (j + 1));
          return $(this).addClass("hidden " + slideElementClass);
        });
      });
      this.startTime = Date.now();
      if (!changeToHashSlide()) {
        this.changeSlideTo(1);
      }
      $(this.window).on("hashchange", changeToHashSlide);
      return $(this.document).on("keydown", Prez.handlers.keyDown);
    };

    Prez.prototype.slideStarted = function($slide) {
      var $remainingUntimed;
      this.slideStartTime = Date.now();
      this.slideDuration = $slide.slideDuration();
      if (this.slideDuration <= 0) {
        $remainingUntimed = $slide.nextAll(".prez-slide").filter(function() {
          return $(this).slideDuration() <= 0;
        });
        this.slideDuration = this.remainingPresentationSeconds() / ($remainingUntimed.size() + 1);
        if (this.slideDuration < 0) {
          return this.slideDuration = 0;
        }
      }
    };

    Prez.prototype.changeSlideTo = function(nextValue, nextElement) {
      var $next, base, i, k, l, ref, ref1, ref2, ref3;
      if (nextElement == null) {
        nextElement = 0;
      }
      $next = $(".prez-slide[data-slide='" + nextValue + "']", this.document);
      if ($next.size() === 0) {
        return false;
      }
      if (nextValue !== this.currentSlide()) {
        $(".prez-slide", this.document).hide();
        $next.show();
        this.slideStarted($next);
      }
      if (nextElement === 0) {
        $next.find(".prez-element").addClass("hidden").removeClass("visible");
      } else if (this.currentElement() > nextElement) {
        for (i = k = ref = this.currentElement(), ref1 = nextElement + 1; ref <= ref1 ? k <= ref1 : k >= ref1; i = ref <= ref1 ? ++k : --k) {
          $next.find(".prez-element[data-slide-element='" + i + "']").addClass("hidden").removeClass("visible");
        }
      } else if (this.currentElement() < nextElement) {
        for (i = l = ref2 = this.currentElement() + 1, ref3 = nextElement; ref2 <= ref3 ? l <= ref3 : l >= ref3; i = ref2 <= ref3 ? ++l : --l) {
          $next.find(".prez-element[data-slide-element='" + i + "']").removeClass("hidden").addClass("visible");
        }
      }
      if (this.options.slideElementStyle === "opacity") {
        $next.hide().show(0);
      }
      if (typeof (base = this.options).slideChanged === "function") {
        base.slideChanged($next, nextValue, nextElement);
      }
      return true;
    };

    Prez.prototype.currentSlide = function() {
      if ($(".prez-slide:visible", this.document).size() === 0) {
        return null;
      }
      return parseInt($(".prez-slide:visible", this.document).data("slide"), 10);
    };

    Prez.prototype.currentElement = function() {
      if (this.currentSlide() === null) {
        return null;
      }
      if ($(".prez-slide:visible .prez-element.visible", this.document).size() === 0) {
        return 0;
      }
      return parseInt($(".prez-slide:visible .prez-element.visible:last", this.document).data("slide-element"), 10);
    };

    Prez.prototype.countSlideElements = function(slide) {
      var $slide;
      $slide = $(".prez-slide[data-slide='" + slide + "']", this.document);
      if ($slide.size() === 0) {
        return 0;
      }
      return $slide.find(".prez-element").size();
    };

    Prez.prototype.countSlides = function() {
      return $(".prez-slide", this.document).size();
    };

    Prez.prototype.changeSlideBy = function(amount) {
      var _, element, k, nextElement, nextSlide, ref, slide;
      slide = this.currentSlide();
      element = this.currentElement();
      nextSlide = slide;
      nextElement = element;
      for (_ = k = 1, ref = Math.abs(amount); 1 <= ref ? k <= ref : k >= ref; _ = 1 <= ref ? ++k : --k) {
        if (amount > 0) {
          if (nextElement >= this.countSlideElements(nextSlide)) {
            nextSlide++;
            nextElement = 0;
          } else {
            nextElement++;
          }
        } else {
          if (nextElement <= 0) {
            nextSlide--;
            nextElement = this.countSlideElements(nextSlide);
          } else {
            nextElement--;
          }
        }
      }
      if (this.changeSlideTo(nextSlide, nextElement) && this.options.useHash) {
        return this.document.location.hash = nextSlide + "-" + nextElement;
      }
    };

    Prez.prototype.nextSlide = function() {
      return this.changeSlideBy(1);
    };

    Prez.prototype.prevSlide = function() {
      return this.changeSlideBy(-1);
    };

    Prez.prototype.end = function() {
      return this.window.close();
    };

    Prez.prototype.remainingPresentationSeconds = function() {
      return Math.floor(this.options.duration - ((Date.now() - this.startTime) / 1000));
    };

    Prez.prototype.remainingPresentationTime = function() {
      return Prez.secondsToTime(this.remainingPresentationSeconds(), Prez.timeLevels(this.options.duration));
    };

    Prez.prototype.remainingSlideSeconds = function() {
      return Math.floor(this.slideDuration - ((Date.now() - this.slideStartTime) / 1000));
    };

    Prez.prototype.remainingSlideTime = function() {
      return Prez.secondsToTime(this.remainingSlideSeconds(), Prez.timeLevels(this.slideDuration));
    };

    Prez.timeLevels = function(s) {
      if (s >= (60 * 60)) {
        return 3;
      } else if (s >= 60) {
        return 2;
      } else {
        return 1;
      }
    };

    Prez.timeToSeconds = function(t) {
      var result, values;
      values = t.split(":");
      result = parseInt(values.pop() || "0", 10);
      result += parseInt(values.pop() || "0", 10) * 60;
      result += parseInt(values.pop() || "0", 10) * 60 * 60;
      return result;
    };

    Prez.secondsToTime = function(s, minLevels) {
      var hours, minutes, pad, seconds;
      if (minLevels == null) {
        minLevels = 1;
      }
      pad = function(n, size) {
        var result;
        result = "" + n;
        while (result.length < size) {
          result = "0" + result;
        }
        return result;
      };
      s = Math.floor(s);
      s = Math.abs(s);
      seconds = s % 60;
      minutes = Math.floor(s / 60) % 60;
      hours = Math.floor(s / 60 / 60);
      if (hours > 0 || minLevels >= 3) {
        return hours + ":" + (pad(minutes, 2)) + ":" + (pad(seconds, 2));
      } else if (minutes > 0 || minLevels === 2) {
        return minutes + ":" + (pad(seconds, 2));
      } else {
        return "" + seconds;
      }
    };

    KEY_ENTER = 13;

    KEY_SPACE = 32;

    KEY_LEFT = 37;

    KEY_RIGHT = 39;

    Prez.handlers = {
      keyDown: function(e) {
        var ref, ref1;
        if ($(e.target).is("button, input, textarea, select, option")) {
          return;
        }
        switch (e.which) {
          case KEY_LEFT:
            e.preventDefault();
            return (ref = Prez.current) != null ? ref.prevSlide() : void 0;
          case KEY_ENTER:
          case KEY_SPACE:
          case KEY_RIGHT:
            e.preventDefault();
            return (ref1 = Prez.current) != null ? ref1.nextSlide() : void 0;
        }
      },
      timeChange: function() {
        var seconds;
        if (!Prez.current) {
          return;
        }
        $(".prez-total-duration").text(Prez.current.remainingPresentationTime());
        seconds = Prez.current.remainingPresentationSeconds();
        $(".prez-total-duration").toggleClass("prez-danger-time", seconds <= 60 && seconds >= 0);
        $(".prez-total-duration").toggleClass("prez-over-time", seconds < 0);
        $(".prez-current-slide-duration").text(Prez.current.remainingSlideTime());
        seconds = Prez.current.remainingSlideSeconds();
        $(".prez-current-slide-duration").toggleClass("prez-danger-time", seconds <= 3 && seconds >= 0);
        $(".prez-current-slide-duration").toggleClass("prez-over-time", seconds < 0);
        if (Math.floor(Date.now() / 250) % 2 === 0) {
          $(".prez-danger-time").hide();
        } else {
          $(".prez-danger-time").show();
        }
        $(".prez-total-duration:not(.prez-danger-time)").show();
        return $(".prez-current-slide-duration:not(.prez-danger-time)").show();
      }
    };

    return Prez;

  })();

  $(document).on("click", "#new-window", function(e) {
    if (Prez.current) {
      return;
    }
    return $.setTimeout(1, (function(_this) {
      return function() {
        if ($(_this).is(".active")) {
          $("#new-window #launch-message").text("Launch in new window");
          return $("#new-window .glyphicon").addClass("glyphicon-new-window").removeClass("glyphicon-unchecked");
        } else {
          $("#new-window #launch-message").text("Launch in this window");
          return $("#new-window .glyphicon").removeClass("glyphicon-new-window").addClass("glyphicon-unchecked");
        }
      };
    })(this));
  });

  $(document).on("click", "#launch", function(e) {
    var iframe, iframePrez;
    e.preventDefault();
    if (Prez.current) {
      return;
    }
    if (!$("#new-window").is(".active")) {
      $("#in-window-not-implemented-modal").modal("show");
      return;
    }
    iframe = $("iframe")[0];
    iframe = iframe.contentWindow ? iframe.contentWindow : iframe.contentDocument.document ? iframe.contentDocument.document : iframe.contentDocument;
    iframePrez = new Prez({
      window: iframe,
      useHash: false,
      slideElementStyle: "opacity"
    });
    Prez.current = new Prez({
      duration: Prez.timeToSeconds($("#prez-duration").val()),
      window: window.open("", "prez", "width=640,height=480"),
      slideChanged: function($slide, slideNumber, elementNumber) {
        var notes;
        notes = $slide.find(".prez-notes").html() || "";
        $("#slide-notes").html(notes);
        $(".current-slide-number:not(select)").text($slide.data("slide"));
        $("select.current-slide-number").val($slide.data("slide"));
        Prez.handlers.timeChange();
        return iframePrez.changeSlideTo(slideNumber, elementNumber);
      },
      beforeStart: function(prez) {
        var i, k, ref, results;
        $("select.current-slide-number").empty();
        results = [];
        for (i = k = 1, ref = prez.countSlides(); 1 <= ref ? k <= ref : k >= ref; i = 1 <= ref ? ++k : --k) {
          results.push($("select.current-slide-number").append("<option value=\"" + i + "\">" + i + "</option>"));
        }
        return results;
      }
    });
    $(".total-slides").text(Prez.current.countSlides());
    $("#pre-launch").hide();
    $("#post-launch").show();
    return $(Prez.current.window).bind("beforeunload", function() {
      $("#post-launch").hide();
      $("#pre-launch").show();
      Prez.current = null;
      return void 0;
    });
  });

  $(document).on("click", ".next-slide", function(e) {
    var ref;
    e.preventDefault();
    return (ref = Prez.current) != null ? ref.nextSlide() : void 0;
  });

  $(document).on("click", ".prev-slide", function(e) {
    var ref;
    e.preventDefault();
    return (ref = Prez.current) != null ? ref.prevSlide() : void 0;
  });

  $(document).on("click", ".end-prez", function(e) {
    var ref;
    e.preventDefault();
    return (ref = Prez.current) != null ? ref.end() : void 0;
  });

  $(document).on("change", "select.current-slide-number", function(e) {
    var ref;
    if ((ref = Prez.current) != null) {
      ref.changeSlideTo(parseInt($(this).val(), 10));
    }
    return $(this).blur();
  });

  $(window).bind("beforeunload", function() {
    var ref;
    return (ref = Prez.current) != null ? ref.end() : void 0;
  });

  $(document).on("keydown", Prez.handlers.keyDown);

  $.setInterval(50, Prez.handlers.timeChange);

  $(function() {
    return $("#in-window-not-implemented-modal").modal({
      show: false
    });
  });

}).call(this);
